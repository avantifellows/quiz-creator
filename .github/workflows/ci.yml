name: CI/CD Pipeline

on:
  pull_request:
    branches: [main]

  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: npm install

      - name: Store node_modules
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: tar -czf node_modules.tar.gz node_modules
        continue-on-error: true

      - name: Upload node_modules
        if: steps.cache-deps.outputs.cache-hit != 'true'
        uses: actions/upload-artifact@v3
        with:
          name: node_modules
          path: node_modules.tar.gz

  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download node_modules
        if: needs.setup.outputs.cache-hit != 'true'
        uses: actions/download-artifact@v3
        with:
          name: node_modules
          path: .

      - name: Extract node_modules
        if: needs.setup.outputs.cache-hit != 'true'
        run: tar -xzf node_modules.tar.gz

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Run ESLint
        run: npm run lint:check

      - name: Run Prettier
        run: npm run format:check

  unit-test:
    runs-on: ubuntu-latest
    needs: [setup, lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download node_modules
        if: needs.setup.outputs.cache-hit != 'true'
        uses: actions/download-artifact@v3
        with:
          name: node_modules
          path: .

      - name: Extract node_modules
        if: needs.setup.outputs.cache-hit != 'true'
        run: tar -xzf node_modules.tar.gz

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Run Jest tests
        run: npm run test:jest

  e2e-test:
    runs-on: ubuntu-latest
    needs: [setup, lint, unit-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download node_modules
        if: needs.setup.outputs.cache-hit != 'true'
        uses: actions/download-artifact@v3
        with:
          name: node_modules
          path: .

      - name: Extract node_modules
        if: needs.setup.outputs.cache-hit != 'true'
        run: tar -xzf node_modules.tar.gz

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Start Next.js server
        run: npm run build && npm run start &
        env:
          NODE_ENV: production

      - name: Run Cypress tests
        run: npm run test:cypress
        env:
          CI: true
